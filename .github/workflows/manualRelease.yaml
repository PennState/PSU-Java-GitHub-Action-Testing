name: Manual - Automatic Release Calculating
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: ossrh
        server-username: OSSRH_USERNAME
        server-password: OSSRH_PASSWORD

    - name: Increment Step Minor
      uses: rickstaa/action-get-semver@v1
      id: get_semver
      with: 
        bump_level: "minor"
        verbose: true

    - name: Setup gitversion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: "5.x"

    - name: Determine Version
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7

    - name: Display GitVersion outputs
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"

    - name: Display GitVersion config
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        additionalArguments: '/showConfig'

    # - name: Patch Release with Maven
    #   shell: bash
    #   run: |
    #     git config --global user.name "ais-swe-ci"
    #     git config --global user.email "aitci@psu.edu"
    #     git checkout develop
    #     echo "git log"
    #     git log
    #     echo -n $SIGNING_PRIVATE | base64 -di > ~/private.asc
    #     gpg --pinentry-mode loopback --batch --no-tty --yes --passphrase $SIGNING_PASSPHRASE --import ~/private.asc
    #     mvn -B clean build-helper:parse-version jgitflow:release-start -DreleaseVersion=${releaseVersion} -DdevelopmentVersion=${nextVersion}-SNAPSHOT -DallowUntracked=true -DallowSnapshots=false -DallowUntracked=true -Psign-artifacts
    #     mvn -B jgitflow:release-finish -Dgpg.passphrase=$SIGNING_PASSPHRASE -DreleaseVersion=${releaseVersion} -DdevelopmentVersion=${nextVersion}-SNAPSHOT -DallowUntracked=true -DallowSnapshots=false -DallowUntracked=true -Psign-artifacts
    #     git checkout develop
    #     git commit --amend -m '[skip-ci] Updating develop poms back to pre merge state'
    #     git push --all --follow-tags
    #   env:
    #     SIGNING_PRIVATE: ${{secrets.SIGNING_PRIVATE}}
    #     SIGNING_PASSPHRASE: ${{secrets.SIGNING_PASSPHRASE}}
    #     OSSRH_USERNAME: aitci
    #     OSSRH_PASSWORD: ${{secrets.OSSRH_PASSWORD}}
    #     releaseVersion: ${{github.events.input.releaseVersion}}
    #     nextVersion: ${{github.events.input.nextVersion}}

    # TODO: add steps to:
    # - Version POMs
    # - Update POM to next Snapshot version (on develop branch)
    # - Add released artifacts to the release (publish) that started this build
